<?php
// $Id: google_weather.module,v 1.0 2010/07/10 19:06:00 m.kubala Exp $

function google_weather_menu() {
  $pozycje = array();
  
  $pozycje['admin/settings/google-weather'] = array(
    'title' => t("Weather Forecast from Google"),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_weather_admin'),
    'access arguments' => array('configure weather forecast'),
    'type' => MENU_NORMAL_ITEM
  );
  
  return $pozycje;
}

function google_weather_perm() {
  return array('configure weather forecast');
}

function google_weather_admin() {
  $form = array();

  $form['gw_location'] = array(
    '#type' => 'textfield',
    '#title' => t("Location"),
    '#default_value' => variable_get('gw_location', 'London'),
    '#required' => TRUE,
  );

  $form['gw_days'] = array(
    '#type' => 'select',
    '#title' => t("How long forecast do you want?"),
    '#default_value' => variable_get('gw_days', 3),
    '#options' => array(
      '2' => 1,
      '3' => 2,
      '4' => 3,
      '5' => 4,
    ),
    '#description' => t("Number of days, including today forecast"),
    '#required' => TRUE,
  );
  
  $form['gw_fetch'] = array(
    '#type' => 'fieldset',
    '#title' => t("Configure connection with Google"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $form['gw_fetch']['gw_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t("Connection timeout"),
    '#default_value' => variable_get('gw_timeout', 10),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function google_weather_block($op = 'list', $delta = 0, $edit = array()) { 
  if($op == 'list') {
      $block = array();
      $block[0]["info"] = t("Weather forecast"); 
      return $block;
  } else if ($op == 'view') {
      $block['title'] = t("Weather");
      $block['content'] = google_weather_get_content();
      return $block;
  }
}

function google_weather_get_content() {
  global $language;
  
  $error_message = t("Error. Couldn't get information from Google.");
  
  $api = "http://www.google.com/ig/api?hl=" . $language->language . "&weather=";

  $url = $api.urlencode(variable_get('gw_location', 'London'));

  $cv = @curl_version();
  if(!is_array($cv)) { 
    watchdog('google weather', t("Required cURL for download information about weather forecast from Google."), array(), WATCHDOG_ERROR);
    return $error_message;
  }
  
  $ch = @curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_TIMEOUT, variable_get('gw_timeout', 20));
  $data = @curl_exec($ch);
  $encoding = array_pop(explode('charset=', curl_getinfo($ch, CURLINFO_CONTENT_TYPE)));
  curl_close($ch);

  if($encoding != 'UTF-8') $data = @iconv($encoding, "UTF-8", $data);

  $xml = @simplexml_load_string($data);

  if ($xml) {
    if ($xml->weather->problem_cause) {
      $blad = $xml->weather->problem_cause->attributes()->data;
      return $blad;
    }
    
    $handler = $xml->weather;
    
    $content = array();
    $content['info'] = array (
      'location' => (string)$handler->forecast_information->postal_code->attributes()->data,
      'date' => (string)$handler->forecast_information->forecast_date->attributes()->data,
    );
    
    $today = &$handler->current_conditions;
    $condition = (string)$today->condition->attributes()->data;
    $content['current'] = array(
        'temp' => (string)$today->temp_c->attributes()->data,
        'humidity' => (string)$today->humidity->attributes()->data,
        'icon' => theme('image', 'http://www.google.com' . (string)$today->icon->attributes()->data, $condition, $condition, NULL, FALSE),
        'condition' => $condition,
        'wind_condition' => (string)$today->wind_condition->attributes()->data,
      );
    
    $i = 0;
    $content['forecast'] = array();
    
    foreach($handler->forecast_conditions as $nextdays) {
      $i++;
      if($i >= variable_get('gw_days', 3)) continue;
      $condition = (string)$nextdays->condition->attributes()->data;
      $content['forecast'][$i] = array(
        'day' => ($i == 1) ? t("Today") : ucwords((string)$nextdays->day_of_week->attributes()->data),
        'low_temp' => (string)$nextdays->low->attributes()->data,
        'high_temp' => (string)$nextdays->high->attributes()->data,
        'icon' => theme('image', 'http://www.google.com' . (string)$nextdays->icon->attributes()->data, $condition, $condition, NULL, FALSE),
        'condition' => $condition,
      );
    }
    
    drupal_add_css(drupal_get_path('module', 'google_weather') . '/google_weather.css');
    
    return theme('google_weather_block', $content);

  } else {
    return $error_message;
  }
}

function google_weather_theme() {
  return array(
    'google_weather_block' => array(
      'template' => 'google_weather-block',
      'arguments' => array('content' => NULL),
    ),
  );
}
